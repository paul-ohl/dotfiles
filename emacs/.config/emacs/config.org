#+TITLE: Pohl's Emacs config
#+AUTHOR: Paul OHL
#+DESCRIPTION: My personal emacs config, for work and leisure
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][Important programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#evil-mode][E(vi)l Mode!]]
  - [[#keybindings][Keybindings]]
  - [[#options][Options]]
- [[#fonts][Fonts]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#zooming-in-and-out][Zooming in and out]]
  - [[#all-the-icons][All the icons]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#disable-menu-bar-tool-bar-and-scrollbars][Disable menu bar, tool bar and scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
- [[#ivy-counsel][Ivy (Counsel)]]
- [[#org-mode][Org mode!]]
  - [[#org-tempo][Org tempo]]
  - [[#disable-weird-auto-indent][Disable weird auto-indent]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#enable-org-bullets][Enable Org bullets]]
- [[#useful-functions][Useful functions]]
- [[#which-key][Which-key]]
- [[#sudo-edit][Sudo edit]]

* Important programs to load first

** Elpaca Package Manager

[[https://github.com/progfolio/elpaca][Elpaca]] is a package manager for emacs written in elisp.
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

#+end_src

** E(vi)l Mode!

#+begin_src emacs-lisp
  ;; Install evil mode
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

** Keybindings

We use [[https://github.com/noctuid/general.el][General.el]] to manage keybindings.
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)

    (general-create-definer pohl/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC" ;; Allows using leader key in insert mode
      )

    ;; No leader prefix
    (general-def 'normal
      "g c c" '(comment-line :wk "comment line")
      "C-s" '(save-buffer :wk "save buffer")
      )

    (pohl/leader-keys
      "w" '(:ignore t :wk "window interactions")
      "w w" '(save-buffer :wk "save")
      "w q" '(evil-quit :wk "close window")
      "w s" '(evil-window-split :wk "split window horizontally")
      "w v" '(evil-window-vsplit :wk "split window vertically")
      "w h" '(evil-window-left :wk "move left")
      "w j" '(evil-window-down :wk "move down")
      "w k" '(evil-window-up :wk "move up")
      "w l" '(evil-window-right :wk "move right")
      )

    (pohl/leader-keys
      "s" '(:ignore t :wk "search")
      "s d" '(find-file :wk "directories")
      "s b" '(ibuffer :wk "buffers")
      "s c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "configuration")
      "s r" '(counsel-recentf :wk "recent files")
    )

    (pohl/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Open buffer switcher")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      )

    ;; <Leader>u is "toggle". Don't question it.
    (pohl/leader-keys
      "u" '(:ignore t :wk "toggle")
      "u l" '(display-line-numbers-mode :wk "line numbers")
      ;; "u r" '(display-line-numbers-type :wk "relative line numbers") ;; Find out how to toggle relative line numbers
      "u w" '(visual-line-mode :wk "line wrap")
      )

    (pohl/leader-keys
      "h" '(:ignore t :wk "help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r" '(reload-init-file :wk "Reload emacs config")
      "h e" '(eval-region :wk "Eval elisp in region")
      )

    )
#+end_src

** Options
Options to control the general workings of Emacs.

#+begin_src emacs-lisp
  (setq display-line-numbers 'relative)
#+end_src
* Fonts
Defining the various fonts to use for Emacs

** Setting the font face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "MononokiNerdFont"
                      :height 140
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Comfortaa"
                      :height 120
                      :weight 'Semibold)
  (set-face-attribute 'fixed-pitch nil
                      :font "MononokiNerdFont"
                      :height 140
                      :weight 'medium)

  ;; Makes comments and keywords italics.
  ;; Only works in emacsclient.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "MononokiNerdFont-14"))

  (setq-default line-spacing 0.12)

#+end_src

** Zooming in and out
Zoom in/out with Ctrl PLUS =/- or with Ctrl PLUS scroll wheel.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** All the icons
All the icons is an icon pack that contains pretty much everything needed to make a beautiful config.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  )
#+end_src
* GUI Tweaks
Looking goooood.

** Disable menu bar, tool bar and scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display line numbers and truncated lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
#+end_src

* Ivy (Counsel)

Ivy is a completion mechanism for Emacs.
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    ;; Useful command for keybindings:
    ;; ivy-resume: Resume last search
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode)
  )
#+end_src

Counsel is a collection of commands that use Ivy.
#+begin_src emacs-lisp
  (use-package counsel
   :ensure t
   :after ivy
   :config (counsel-mode)
  )
#+end_src

Ivy-rich adds some *bling* to the config.
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1)
  )

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer)
  )
#+end_src

* Org mode!
** Org tempo

| Typing ... | gives a ... block |
|------------+-------------------|
| <a         | ascii export      |
| <c         | center            |
| <C         | comment           |
| <e         | example           |
| <E         | export            |
| <h         | html export       |
| <l         | latex export      |
| <q         | quote             |
| <s         | src               |
| <v         | verse             |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Disable weird auto-indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src
** Enable table of contents

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable Org bullets
More readable bullets, instead of seeing the asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* Useful functions

For some reason reloading once does not work...
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src


* Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-diplay-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))

#+end_src

* Sudo edit
sudo-edit allows the user to switch to sudo while editing a file, without having to change editors!

#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :config
    (pohl/leader-keys
      "s s" '(sudo-edit-find-file :wk "Sudo find file")
      "u s" '(sudo-edit :wk "switch to sudo edit")
      )
    )
#+end_src

