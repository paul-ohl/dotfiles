#+TITLE: Pohl's Emacs config
#+AUTHOR: Paul OHL
#+DESCRIPTION: My personal emacs config, for work and leisure
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Important programs to load first

** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.7)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			   :ref nil :depth 1
			   :files (:defaults "elpaca-test.el" (:exclude "extensions"))
			   :build (:not elpaca--activate-package)))
			    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
				   (build (expand-file-name "elpaca/" elpaca-builds-directory))
				   (order (cdr elpaca-order))
				   (default-directory repo))
			     (add-to-list 'load-path (if (file-exists-p build) build repo))
			     (unless (file-exists-p repo)
			      (make-directory repo t)
			      (when (< emacs-major-version 28) (require 'subr-x))
			      (condition-case-unless-debug err
			       (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
					((zerop (apply #'call-process `("git" nil ,buffer t "clone"
									,@(when-let ((depth (plist-get order :depth)))
									    (list (format "--depth=%d" depth) "--no-single-branch"))
									,(plist-get order :repo) ,repo))))
					((zerop (call-process "git" nil buffer t "checkout"
						 (or (plist-get order :ref) "--"))))
					(emacs (concat invocation-directory invocation-name))
					((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
						 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
					((require 'elpaca))
					((elpaca-generate-autoloads "elpaca" repo)))
				(progn (message "%s" (buffer-string)) (kill-buffer buffer))
				(error "%s" (with-current-buffer buffer (buffer-string))))
			       ((error) (warn "%s" err) (delete-directory repo 'recursive))))
			    (unless (require 'elpaca-autoloads nil t)
			     (require 'elpaca)
			     (elpaca-generate-autoloads "elpaca" repo)
			     (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
       (elpaca `(,@elpaca-order))

       ;; Install use-package support
       (elpaca elpaca-use-package
	;; Enable use-package :ensure support for Elpaca.
	(elpaca-use-package-mode))

#+end_src

** E(vi)l Mode!

#+begin_src emacs-lisp
;; Install evil mode
(use-package evil
 :ensure t
 :demand t
 :init
 (setq evil-want-integration t)
 (setq evil-want-keybinding nil)
 (setq evil-vsplit-window-right t)
 (setq evil-split-window-below t)
 (evil-mode))
(use-package evil-collection
 :ensure t
 :demand t
 :after evil
 :config
 (setq evil-collection-mode-list '(dashboard dired ibuffer))
 (evil-collection-init))
#+end_src

** General Keybindings

#+begin_src emacs-lisp
  (use-package general
   :ensure t
   :config
   (general-evil-setup)

   (general-create-definer pohl/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC") ;; Allows using leader key in insert mode

   (pohl/leader-keys
    "b" '(:ignore t :wk "buffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "br" '(revert-buffer :wk "Reload buffer"))

  )
#+end_src

* Fonts
Defining the various fonts to use for Emacs

** Setting the font face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
   :font "MononokiNerdFont"
   :height 200
   :weight 'medium)
  (set-face-attribute 'variable-pitch nil
   :font "Comfortaa"
   :height 120
   :weight 'Semibold)
  (set-face-attribute 'fixed-pitch nil
   :font "MononokiNerdFont"
   :height 200
   :weight 'medium)

  ;; Makes comments and keywords italics.
  ;; Only works in emacsclient.
  (set-face-attribute 'font-lock-comment-face nil
   :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
   :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "MononokiNerdFont-15"))

  (setq-default line-spacing 0.12)

#+end_src
